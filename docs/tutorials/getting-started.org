#+TITLE: Getting started with wagtail-factories
#+AUTHOR: Joshua Munn
#+EMAIL: public@elysee-munn.family
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args:python :python "uv run python" :session django :exports code
#+PROPERTY: header-args:bash :session shell

#+begin_src python :exports none :var root = (expand-file-name (project-root (project-current)))
  import os
  import django

  os.chdir(root)
  os.environ.setdefault("DJANGO_SETTINGS_MODULE", "tutorial.settings.dev")
  django.setup()
#+end_src

#+RESULTS:
: None


* Goals

In this tutorial, you will learn how to use the wagtail-factories library to create [[https://factoryboy.readthedocs.io/en/stable/][factory boy]] factories for a Wagtail project. These factories facilitate the easy creation of model instances, which is particularly useful for tests.

We'll learn about factories for Wagtail's models - factories for stream field blocks will be covered in another document.

We assume working familiarity with Wagtail, and a passing familiarity with factory boy.

* Page models

To get started, we'll create some basic page models. Wagtail gives us a ~HomePage~ model by default - we'll keep that.

#+begin_src python :eval no :tangle "../../home/models.py" :comments link
  from wagtail.models import Page


  class HomePage(Page):
      pass
#+end_src

Add a ~BlogPage~ type with an ~ImageField~, a ~TextField~, and a foreign key to Wagtail's ~Page~ model.

#+begin_src python :eval no :tangle "../../home/models.py" :comments link
  from django.db import models
  from wagtail.documents import get_document_model
  from wagtail.images import get_image_model


  class BlogPage(Page):
      hero_image = models.ForeignKey(
          get_image_model(),
          on_delete=models.PROTECT,
          related_name="+",
      )
      splash_text = models.TextField(blank=True)
      related_page = models.ForeignKey(
          Page,
          null=True,
          blank=True,
          on_delete=models.SET_NULL,
          related_name="related_pages",
      )
      policy = models.ForeignKey(
          get_document_model(),
          null=True,
          blank=True,
          on_delete=models.SET_NULL,
          related_name="+",
      )
#+end_src

Create and run the migrations.

#+begin_src bash :exports none :var WORKDIR=(expand-file-name (project-root (project-current)))
  export DJANGO_SETTINGS_MODULE=tutorial.settings.dev
  cd $WORKDIR
#+end_src

#+RESULTS:

#+begin_src bash :results output :exports code
  uv run python manage.py makemigrations --noinput --no-color
  uv run python manage.py migrate --noinput --no-color
#+end_src

#+RESULTS:
: Migrations for 'home':
:   home/migrations/0004_blogpage_policy.py
:     + Add field policy to blogpage
: Operations to perform:
:   Apply all migrations: admin, auth, contenttypes, home, sessions, taggit, wagtailadmin, wagtailcore, wagtaildocs, wagtailembeds, wagtailforms, wagtailimages, wagtailredirects, wagtailsearch, wagtailusers
: Running migrations:
:   Applying home.0004_blogpage_policy... OK

With some models created, we are ready to create the corresponding factory classes.

* Page factories

First, we'll create a factory for the ~HomePage~ type.

#+begin_src python :eval no :tangle "../../home/factories.py" :comments link
  import factory
  from wagtail_factories import PageFactory

  from home.models import HomePage


  class HomePageFactory(PageFactory):
      class Meta:
          model = HomePage
#+end_src

#+RESULTS:

This one's simple. We can use it to create ~HomePage~ instances:

#+begin_src python :exports none
  import factory.random
  from home.factories import HomePageFactory

  factory.random.reseed_random("tutorial-seed")
#+end_src

#+RESULTS:
: None

#+begin_src python :results value pp :exports both
  HomePageFactory(title="My temporary home page")
#+end_src

#+RESULTS:
: <HomePage: My temporary home page>

Let's create ~BlogPageFactory~ with some more declarations.

#+begin_src python :eval no :tangle "../../home/factories.py" :comments link
  from wagtail_factories import DocumentFactory, ImageFactory

  from home.models import BlogPage


  class BlogPageFactory(PageFactory):
      hero_image = factory.SubFactory(ImageFactory)
      splash_text = factory.Faker("paragraph")
      related_page = factory.SubFactory(PageFactory)
      policy = factory.SubFactory(DocumentFactory)

      class Meta:
          model = BlogPage
#+end_src

#+begin_src python :exports none
  import factory

  from home.factories import BlogPageFactory
#+end_src

#+RESULTS:
: None

First, let's generate an instance without any specific parameters.

#+begin_src python :results value pp :exports both
  blog_page = BlogPageFactory()

  blog_page
#+end_src

#+RESULTS:
: <BlogPage: Test page>

A title has been generated

#+begin_src python :results value pp :exports both
  blog_page.title
#+end_src

#+RESULTS:
: 'Test page'

As has an image...

#+begin_src python :results value pp :exports both
  blog_page.hero_image.file
#+end_src

#+RESULTS:
: <WagtailImageFieldFile: original_images/example_afuIMkn.jpg>

...a document...

#+begin_src python :results value pp :exports both
  blog_page.policy.file
#+end_src

#+RESULTS:
: <FieldFile: documents/example.dat>

...and text.

#+begin_src python :results value pp :exports both
  blog_page.splash_text
#+end_src

#+RESULTS:
: ('Type first street surface foot yes. Source national new window improve '
:  'church. Just executive forget company almost get some.')

A related page was also generated: we can inspect its attributes.

#+begin_src python :results value pp :exports both
  blog_page.related_page.pk
#+end_src

#+RESULTS:
: 34

* More control

~PageFactory~ subclasses are ultimately ~factory.django.DjangoModelFactory~ subclasses. This means that factory boy's full feature set is available to us, so we can specify the values of our instances, even spanning relationships.


#+begin_src python :results value pp :exports both
  blog_2 = BlogPageFactory(
      title="My new blog",
      related_page__title="Closely related page",
      splash_text=factory.LazyAttribute(lambda o: f"{o.related_page.title} is closely related"),
  )

  blog_2.splash_text
#+end_src

#+RESULTS:
: 'Closely related page is closely related'

See the [[https://factoryboy.readthedocs.io/en/stable/index.html][factory boy docs]] for all the details.

** The page tree
