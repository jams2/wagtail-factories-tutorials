#+TITLE: Getting started with wagtail-factories
#+AUTHOR: Joshua Munn
#+EMAIL: public@elysee-munn.family
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args:python :python "uv run python" :session getting-started-django :exports code
#+PROPERTY: header-args:bash :session shell

#+begin_src bash :exports none :var WORKDIR=(expand-file-name (project-root (project-current)))
  rm -f $WORKDIR/db.sqlite3
#+end_src

#+RESULTS:

#+begin_src python :exports none :var root = (expand-file-name (project-root (project-current)))
  import os
  import django

  os.chdir(root)
  os.environ.setdefault("DJANGO_SETTINGS_MODULE", "tutorial.settings.dev")
  django.setup()
#+end_src

#+RESULTS:
: None


* Goals

In this tutorial, we will learn how to use the wagtail-factories library to create [[https://factoryboy.readthedocs.io/en/stable/][factory boy]] factories for a Wagtail project. These factories facilitate the easy creation of model instances, which is particularly useful for tests.

We'll learn about factories for Wagtail's models - factories for stream field blocks will be covered in another document.

We assume working familiarity with Wagtail, and a passing familiarity with factory boy.

* Page models

To get started, we'll create some basic page models. Wagtail gives us a ~HomePage~ model by default - we'll keep that.

#+begin_src python :eval no :tangle "../../home/models.py" :comments link
  from wagtail.models import Page


  class HomePage(Page):
      pass
#+end_src

Add a ~BlogPage~ type with foreign keys to Wagtail's ~Page~, ~Image~, and ~Document~  models.

#+begin_src python :eval no :tangle "../../home/models.py" :comments link
  from django.db import models
  from wagtail.documents import get_document_model
  from wagtail.images import get_image_model


  class BlogPage(Page):
      hero_image = models.ForeignKey(
          get_image_model(),
          on_delete=models.PROTECT,
          related_name="+",
      )
      splash_text = models.TextField(blank=True)
      related_page = models.ForeignKey(
          Page,
          null=True,
          blank=True,
          on_delete=models.SET_NULL,
          related_name="related_pages",
      )
      policy = models.ForeignKey(
          get_document_model(),
          null=True,
          blank=True,
          on_delete=models.SET_NULL,
          related_name="+",
      )
#+end_src

Create and run the migrations.

#+begin_src bash :exports none :var WORKDIR=(expand-file-name (project-root (project-current)))
  export DJANGO_SETTINGS_MODULE=tutorial.settings.dev
  cd $WORKDIR
#+end_src

#+RESULTS:

#+begin_src bash :results output :exports code
  uv run python manage.py makemigrations --noinput --no-color
  uv run python manage.py migrate --noinput --no-color
#+end_src

#+RESULTS:
: Migrations for 'home':
:   home/migrations/0004_blogpage_policy.py
:     + Add field policy to blogpage
: Operations to perform:
:   Apply all migrations: admin, auth, contenttypes, home, sessions, taggit, wagtailadmin, wagtailcore, wagtaildocs, wagtailembeds, wagtailforms, wagtailimages, wagtailredirects, wagtailsearch, wagtailusers
: Running migrations:
:   Applying home.0004_blogpage_policy... OK

With some models created, we are ready to create the corresponding factory classes.

* Page factories

First, we'll create a factory for the ~HomePage~ type.

#+begin_src python :eval no :tangle "../../home/factories.py" :comments link
  import factory
  from wagtail_factories import PageFactory

  from home.models import HomePage


  class HomePageFactory(PageFactory):
      class Meta:
          model = HomePage
#+end_src

#+RESULTS:

This one's simple. We can use it to create ~HomePage~ instances:

#+begin_src python :exports none
  import factory.random
  from home.factories import HomePageFactory

  factory.random.reseed_random("tutorial-seed")
#+end_src

#+RESULTS:
: None

#+begin_src python :results value pp :exports both
  HomePageFactory(title="My temporary home page")
#+end_src

#+RESULTS:
: <HomePage: My temporary home page>

Let's create a ~BlogPageFactory~ with some more declarations.

#+begin_src python :eval no :tangle "../../home/factories.py" :comments link
  from wagtail_factories import DocumentFactory, ImageFactory

  from home.models import BlogPage


  class BlogPageFactory(PageFactory):
      hero_image = factory.SubFactory(ImageFactory)
      splash_text = factory.Faker("paragraph")
      related_page = factory.SubFactory(PageFactory)
      policy = factory.SubFactory(DocumentFactory)

      class Meta:
          model = BlogPage
#+end_src

#+begin_src python :exports none
  import factory

  from home.factories import BlogPageFactory
#+end_src

#+RESULTS:
: None

First, let's generate an instance without any specific parameters.

#+begin_src python :results value pp :exports both
  blog_page = BlogPageFactory()

  blog_page
#+end_src

#+RESULTS:
: <BlogPage: Test page>

A title has been generated.

#+begin_src python :results value pp :exports both
  blog_page.title
#+end_src

#+RESULTS:
: 'Test page'

As has an image...

#+begin_src python :results value pp :exports both
  blog_page.hero_image.file
#+end_src

#+RESULTS:
: <WagtailImageFieldFile: original_images/example_afuIMkn.jpg>

...a document...

#+begin_src python :results value pp :exports both
  blog_page.policy.file
#+end_src

#+RESULTS:
: <FieldFile: documents/example.dat>

...and text.

#+begin_src python :results value pp :exports both
  blog_page.splash_text
#+end_src

#+RESULTS:
: ('Type first street surface foot yes. Source national new window improve '
:  'church. Just executive forget company almost get some.')

A related page was also generated: we can inspect its attributes.

#+begin_src python :results value pp :exports both
  blog_page.related_page.pk
#+end_src

#+RESULTS:
: 34

* More control

~PageFactory~ subclasses are ultimately ~factory.django.DjangoModelFactory~ subclasses. This means that factory boy's full feature set is available to us, so we can specify the values of our instances, even spanning relationships.


#+begin_src python :results value pp :exports both
  blog_2 = BlogPageFactory(
      title="My new blog",
      related_page__title="Closely related page",
      splash_text=factory.LazyAttribute(lambda o: f"{o.related_page.title} is closely related"),
  )

  blog_2.splash_text
#+end_src

#+RESULTS:
: 'Closely related page is closely related'

See the [[https://factoryboy.readthedocs.io/en/stable/index.html][factory boy docs]] for all the details.

** Image and file details

wagtail-factories uses factory boy's [[https://factoryboy.readthedocs.io/en/stable/orms.html#factory.django.FileField][FileField]] and [[https://factoryboy.readthedocs.io/en/stable/orms.html#factory.django.ImageField][ImageField]] for its ~DocumentFactory~ and ~ImageFactory~, respectively. As images and documents are important entities in a Content Management System, it may be desirable to control how they are created in our tests.

Using the features provided by factory boy, it is possible to define parameters such as file name and contents for documents.

#+begin_src python :results value pp :exports both
  from io import BytesIO
  from wagtail_factories import DocumentFactory


  doc = DocumentFactory(
      file__filename="my-test-doc.txt",
      file__from_file=BytesIO(b"sample content"),
  )

  doc.file.name, doc.file.read()
#+end_src

#+RESULTS:
: ('documents/my-test-doc_FOUkghx.txt', b'sample content')

It may also be desirable to control aspects of generated image files, such as dimensions, colour, and file type.

#+begin_src python :results value pp :exports both
  from wagtail_factories import ImageFactory


  image = ImageFactory(
      file__filename="my-image.png",
      file__width=100,
      file__height=25,
      file__format="PNG",
  )

  image.width, image.height
#+end_src

#+RESULTS:
: (100, 25)


** The page tree

In the examples so far, we've shown isolated page instances that don't interact with one of Wagtail's key concepts: the page tree. By default, page instances created via a ~PageFactory~ subclass are not inserted into any existing page tree.

#+begin_src python :results value pp :exports both
  BlogPageFactory().get_parent()
#+end_src

#+RESULTS:
: None

In practice, we'll often want to replicate a real website's page structure in our tests, for example creating a home page with some children. To mirror a proper Wagtail tree structure, we need a root page, which is an entry in the tree that is not visitable by users, has no parents, and is the ancestor of every page in the tree. This is easy to create using wagtail-factories - in fact, every time we create a page from a factory without an explicit ~parent~ parameter, we are creating one:

#+begin_src python :results value pp :exports both
  from wagtail.models import Page


  Page.get_root_nodes()
#+end_src

#+RESULTS:
: <PageQuerySet [<Page: Root>, <Page: My temporary home page>, <Page: Test page>, <Page: Test page>, <Page: Closely related page>, <Page: My new blog>, <Page: Test page>, <Page: Test page>]>

However, if we're using Wagtail's provided migrations, [[https://github.com/wagtail/wagtail/blob/c78838f6ee89fd8e01101326fa08a36babafd88d/wagtail/migrations/0002_initial_data.py#L17-L25][one is provided for us by default]], so we might like to retrieve and use it.

#+begin_src python :results none :exports code
  root = Page.get_first_root_node()

  home = HomePageFactory(parent=root)
#+end_src

Surprisingly, our home page is still not routable. This is because it does not belong to a ~Site~.

#+begin_src python :results value pp :exports both
  home.url, home.get_site()
#+end_src

#+RESULTS:
: (None, None)

If we start our project with ~wagtail start~, Wagtail [[https://github.com/wagtail/wagtail/blob/c78838f6ee89fd8e01101326fa08a36babafd88d/wagtail/project_template/home/migrations/0002_create_homepage.py#L11-L35][creates an initial home page instance for us]]. We can use that instance in our tests.

#+begin_src python :results value pp :exports both
  from home.models import HomePage


  HomePage.objects.first()
#+end_src

#+RESULTS:
: <HomePage: Home>

However, for complete control over the created instances, we can create our own.

#+begin_src python :results value pp :exports both
  from wagtail.models import Site


  home = HomePageFactory(
      title="My new home page 2",
      # Use the root page instance created by Wagtail.
      parent=Page.get_first_root_node(),
  )

  # Use the Site instance created by Wagtail.
  site = Site.objects.get(is_default_site=True)

  site.root_page = home
  site.save()

  home.url
#+end_src

#+RESULTS:
: '/'

We can then use our new home page as the parent of other pages, e.g. blog pages.

#+begin_src python :results value pp :exports both
  blog = BlogPageFactory(parent=home)

  blog.url
#+end_src

#+RESULTS:
: '/test-page/'

Whether or not to use Wagtail's default data, or create it all in your test setup, will depend on the specifics of your project.
